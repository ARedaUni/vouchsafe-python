# coding: utf-8

"""
    Vouchsafe API docs

    Vouchsafe offers a REST API to conduct operations programmatically.  You can request and manage verifications, as well as perform smart lookups.  To use the API, you need a client ID and secret from the Vouchsafe dashboard. [Sign up here](https://app.vouchsafe.id/) if you haven't already.  We also have a [video guide](https://www.youtube.com/playlist?list=PLx6V6SSTMuF_ZNWBPnysvwmdIwboLViE8) showing the basics, as well as [SDKs and libraries](https://help.vouchsafe.id/en/articles/12026847-vouchsafe-sdks-and-libraries) for popular languages.

    The version of the OpenAPI document: 0.1.0
    Contact: help@vouchsafe.id
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vouchsafe_python.models.get_smart_lookup_response import GetSmartLookupResponse

class TestGetSmartLookupResponse(unittest.TestCase):
    """GetSmartLookupResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetSmartLookupResponse:
        """Test GetSmartLookupResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetSmartLookupResponse`
        """
        model = GetSmartLookupResponse()
        if include_optional:
            return GetSmartLookupResponse(
                id = '',
                team_id = '',
                checks = [
                    'AML'
                    ],
                first_name = '',
                last_name = '',
                first_line_of_address = '',
                postcode = '',
                address_verification_report = vouchsafe_python.models.report.Report(
                    state = 'PASS', 
                    checks = vouchsafe_python.models.record_address_verification_checks/check_result_.Record_AddressVerificationChecks.CheckResult_(
                        postcode_exists = vouchsafe_python.models.check_result.CheckResult(
                            state = 'PASS', 
                            reason = 'INVALID_POSTCODE', ), 
                        address_exists = vouchsafe_python.models.check_result.CheckResult(
                            state = , ), 
                        person_lives_at_address = , ), ),
                metadata = None,
                created_at = ''
            )
        else:
            return GetSmartLookupResponse(
                id = '',
                team_id = '',
                checks = [
                    'AML'
                    ],
                first_name = '',
                last_name = '',
                first_line_of_address = '',
                postcode = '',
                address_verification_report = vouchsafe_python.models.report.Report(
                    state = 'PASS', 
                    checks = vouchsafe_python.models.record_address_verification_checks/check_result_.Record_AddressVerificationChecks.CheckResult_(
                        postcode_exists = vouchsafe_python.models.check_result.CheckResult(
                            state = 'PASS', 
                            reason = 'INVALID_POSTCODE', ), 
                        address_exists = vouchsafe_python.models.check_result.CheckResult(
                            state = , ), 
                        person_lives_at_address = , ), ),
                metadata = None,
                created_at = '',
        )
        """

    def testGetSmartLookupResponse(self):
        """Test GetSmartLookupResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
